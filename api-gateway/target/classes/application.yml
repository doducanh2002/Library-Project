server:
  port: 8080

spring:
  application:
    name: api-gateway
  main:
    allow-bean-definition-overriding: true
  
  # Redis Configuration for Rate Limiting
  data:
    redis:
      host: localhost
      port: 6379
      password: # Add password if needed
      timeout: 2000ms
      lettuce:
        pool:
          max-active: 8
          max-idle: 8
          min-idle: 0
  
  # Gateway Configuration
  cloud:
    gateway:
      # Global CORS Configuration
      globalcors:
        corsConfigurations:
          '[/**]':
            allowedOriginPatterns: "*"
            allowedMethods:
              - GET
              - POST
              - PUT
              - DELETE
              - OPTIONS
            allowedHeaders: "*"
            allowCredentials: true
      
      # Route Configuration
      routes:
        # Authentication Service Routes
        - id: auth-login
          uri: http://localhost:8081
          predicates:
            - Path=/api/v1/auth/login
            - Method=POST
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 5
                redis-rate-limiter.burstCapacity: 10
                
        - id: auth-register
          uri: http://localhost:8081
          predicates:
            - Path=/api/v1/auth/register
            - Method=POST
          filters:
            - name: RequestRateLimiter
              args:
                redis-rate-limiter.replenishRate: 2
                redis-rate-limiter.burstCapacity: 5
                
        - id: auth-service-general
          uri: http://localhost:8081
          predicates:
            - Path=/api/v1/auth/**
          filters:
            - JwtAuthentication
            
        # Book Catalog Service Routes (Public)
        - id: catalog-books-public
          uri: http://localhost:8082
          predicates:
            - Path=/api/v1/books/public/**
            - Method=GET
            
        - id: catalog-categories-public
          uri: http://localhost:8082
          predicates:
            - Path=/api/v1/categories,/api/v1/categories/active,/api/v1/categories/root,/api/v1/categories/{id}
            - Method=GET
            
        - id: catalog-authors-public
          uri: http://localhost:8082
          predicates:
            - Path=/api/v1/authors,/api/v1/authors/search,/api/v1/authors/{id}
            - Method=GET
            
        - id: catalog-publishers-public
          uri: http://localhost:8082
          predicates:
            - Path=/api/v1/publishers,/api/v1/publishers/{id}
            - Method=GET
            
        # Book Catalog Service Routes (Protected)
        - id: catalog-admin
          uri: http://localhost:8082
          predicates:
            - Path=/api/v1/admin/**
          filters:
            - JwtAuthentication
            
        # File Storage Service Routes
        - id: file-upload
          uri: http://localhost:8083
          predicates:
            - Path=/api/v1/files/upload
            - Method=POST
          filters:
            - JwtAuthentication
            - name: RequestSize
              args:
                maxSize: 500MB
                
        - id: file-service-general
          uri: http://localhost:8083
          predicates:
            - Path=/api/v1/files/**
          filters:
            - JwtAuthentication

# Management Endpoints
management:
  endpoints:
    web:
      exposure:
        include: health,info,gateway
  endpoint:
    health:
      show-details: always
      
# Logging Configuration
logging:
  level:
    org.springframework.cloud.gateway: DEBUG
    com.library.gateway: DEBUG
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"
  file:
    name: logs/api-gateway.log

# JWT Configuration
jwt:
  auth-service:
    jwk-url: http://localhost:8081/api/v1/auth/jwk/token