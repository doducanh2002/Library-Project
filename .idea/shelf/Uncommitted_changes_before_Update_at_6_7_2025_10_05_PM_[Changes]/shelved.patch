Index: library-backend/src/test/java/com/library/specification/BookSpecificationTest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.library.specification;\r\n\r\nimport com.library.dto.BookSearchCriteria;\r\nimport com.library.entity.*;\r\nimport com.library.repository.BookRepository;\r\nimport jakarta.persistence.EntityManager;\r\nimport org.junit.jupiter.api.BeforeEach;\r\nimport org.junit.jupiter.api.Test;\r\nimport org.springframework.beans.factory.annotation.Autowired;\r\nimport org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;\r\nimport org.springframework.data.domain.Page;\r\nimport org.springframework.data.domain.PageRequest;\r\nimport org.springframework.data.domain.Pageable;\r\nimport org.springframework.data.jpa.domain.Specification;\r\nimport org.springframework.test.context.ActiveProfiles;\r\n\r\nimport java.math.BigDecimal;\r\nimport java.time.LocalDateTime;\r\nimport java.util.Arrays;\r\nimport java.util.List;\r\n\r\nimport static org.assertj.core.api.Assertions.assertThat;\r\n\r\n@DataJpaTest\r\n@ActiveProfiles(\"test\")\r\nclass BookSpecificationTest {\r\n\r\n    @Autowired\r\n    private BookRepository bookRepository;\r\n\r\n    @Autowired\r\n    private EntityManager entityManager;\r\n\r\n    private Book book1, book2, book3;\r\n    private Category category1, category2;\r\n    private Publisher publisher1, publisher2;\r\n    private Author author1, author2;\r\n\r\n    @BeforeEach\r\n    void setUp() {\r\n        // Create test categories\r\n        category1 = new Category();\r\n        category1.setName(\"Science Fiction\");\r\n        category1.setDescription(\"Science fiction books\");\r\n        entityManager.persist(category1);\r\n\r\n        category2 = new Category();\r\n        category2.setName(\"Fantasy\");\r\n        category2.setDescription(\"Fantasy books\");\r\n        entityManager.persist(category2);\r\n\r\n        // Create test publishers\r\n        publisher1 = new Publisher();\r\n        publisher1.setName(\"Tech Books Publisher\");\r\n        publisher1.setAddress(\"123 Tech Street\");\r\n        entityManager.persist(publisher1);\r\n\r\n        publisher2 = new Publisher();\r\n        publisher2.setName(\"Fiction House\");\r\n        publisher2.setAddress(\"456 Story Lane\");\r\n        entityManager.persist(publisher2);\r\n\r\n        // Create test authors\r\n        author1 = new Author();\r\n        author1.setName(\"John Doe\");\r\n        author1.setBiography(\"Famous sci-fi author\");\r\n        entityManager.persist(author1);\r\n\r\n        author2 = new Author();\r\n        author2.setName(\"Jane Smith\");\r\n        author2.setBiography(\"Popular fantasy writer\");\r\n        entityManager.persist(author2);\r\n\r\n        // Create test books\r\n        book1 = new Book();\r\n        book1.setTitle(\"Java Programming Guide\");\r\n        book1.setIsbn(\"978-0123456789\");\r\n        book1.setDescription(\"Comprehensive guide to Java programming\");\r\n        book1.setLanguage(\"en\");\r\n        book1.setPublicationYear(2020);\r\n        book1.setNumberOfPages(500);\r\n        book1.setPrice(new BigDecimal(\"29.99\"));\r\n        book1.setStockForSale(10);\r\n        book1.setIsSellable(true);\r\n        book1.setIsLendable(true);\r\n        book1.setTotalCopiesForLoan(5);\r\n        book1.setAvailableCopiesForLoan(3);\r\n        book1.setCategory(category1);\r\n        book1.setPublisher(publisher1);\r\n        book1.setCreatedAt(LocalDateTime.now().minusDays(10));\r\n        entityManager.persist(book1);\r\n\r\n        book2 = new Book();\r\n        book2.setTitle(\"Spring Boot in Action\");\r\n        book2.setIsbn(\"978-9876543210\");\r\n        book2.setDescription(\"Learn Spring Boot framework\");\r\n        book2.setLanguage(\"en\");\r\n        book2.setPublicationYear(2021);\r\n        book2.setNumberOfPages(400);\r\n        book2.setPrice(new BigDecimal(\"35.50\"));\r\n        book2.setStockForSale(0); // Out of stock\r\n        book2.setIsSellable(true);\r\n        book2.setIsLendable(false); // Not lendable\r\n        book2.setTotalCopiesForLoan(0);\r\n        book2.setAvailableCopiesForLoan(0);\r\n        book2.setCategory(category1);\r\n        book2.setPublisher(publisher1);\r\n        book2.setCreatedAt(LocalDateTime.now().minusDays(5));\r\n        entityManager.persist(book2);\r\n\r\n        book3 = new Book();\r\n        book3.setTitle(\"The Magic Realm\");\r\n        book3.setIsbn(\"978-1111111111\");\r\n        book3.setDescription(\"An epic fantasy adventure\");\r\n        book3.setLanguage(\"vi\");\r\n        book3.setPublicationYear(2019);\r\n        book3.setNumberOfPages(600);\r\n        book3.setPrice(new BigDecimal(\"25.00\"));\r\n        book3.setStockForSale(15);\r\n        book3.setIsSellable(true);\r\n        book3.setIsLendable(true);\r\n        book3.setTotalCopiesForLoan(8);\r\n        book3.setAvailableCopiesForLoan(6);\r\n        book3.setCategory(category2);\r\n        book3.setPublisher(publisher2);\r\n        book3.setCreatedAt(LocalDateTime.now().minusDays(45)); // Older book\r\n        entityManager.persist(book3);\r\n\r\n        // Create book-author relationships\r\n        BookAuthor bookAuthor1 = new BookAuthor();\r\n        bookAuthor1.setBook(book1);\r\n        bookAuthor1.setAuthor(author1);\r\n        bookAuthor1.setAuthorRole(\"AUTHOR\");\r\n        entityManager.persist(bookAuthor1);\r\n\r\n        BookAuthor bookAuthor2 = new BookAuthor();\r\n        bookAuthor2.setBook(book3);\r\n        bookAuthor2.setAuthor(author2);\r\n        bookAuthor2.setAuthorRole(\"AUTHOR\");\r\n        entityManager.persist(bookAuthor2);\r\n\r\n        entityManager.flush();\r\n        entityManager.clear();\r\n    }\r\n\r\n    @Test\r\n    void testKeywordSearch() {\r\n        // Test keyword search in title\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setKeyword(\"Java\");\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1);\r\n        assertThat(results.get(0).getTitle()).contains(\"Java\");\r\n    }\r\n\r\n    @Test\r\n    void testKeywordSearchInDescription() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setKeyword(\"Spring Boot\");\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1);\r\n        assertThat(results.get(0).getDescription()).contains(\"Spring Boot\");\r\n    }\r\n\r\n    @Test\r\n    void testCategoryFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setCategoryIds(Arrays.asList(category1.getId()));\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(2);\r\n        assertThat(results).allMatch(book -> book.getCategory().getId().equals(category1.getId()));\r\n    }\r\n\r\n    @Test\r\n    void testPublisherFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setPublisherIds(Arrays.asList(publisher2.getId()));\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1);\r\n        assertThat(results.get(0).getPublisher().getId()).isEqualTo(publisher2.getId());\r\n    }\r\n\r\n    @Test\r\n    void testAuthorFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setAuthorIds(Arrays.asList(author1.getId()));\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1);\r\n        assertThat(results.get(0).getTitle()).isEqualTo(\"Java Programming Guide\");\r\n    }\r\n\r\n    @Test\r\n    void testLanguageFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setLanguage(\"vi\");\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1);\r\n        assertThat(results.get(0).getLanguage()).isEqualTo(\"vi\");\r\n    }\r\n\r\n    @Test\r\n    void testPublicationYearFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setPublicationYear(2020);\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1);\r\n        assertThat(results.get(0).getPublicationYear()).isEqualTo(2020);\r\n    }\r\n\r\n    @Test\r\n    void testPublicationYearRange() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setPublicationYearFrom(2020);\r\n        criteria.setPublicationYearTo(2021);\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(2);\r\n        assertThat(results).allMatch(book -> \r\n            book.getPublicationYear() >= 2020 && book.getPublicationYear() <= 2021);\r\n    }\r\n\r\n    @Test\r\n    void testAvailableForLoanFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setAvailableForLoan(true);\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(2); // book1 and book3\r\n        assertThat(results).allMatch(book -> \r\n            book.getIsLendable() && book.getAvailableCopiesForLoan() > 0);\r\n    }\r\n\r\n    @Test\r\n    void testAvailableForSaleFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setAvailableForSale(true);\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(2); // book1 and book3 (book2 out of stock)\r\n        assertThat(results).allMatch(book -> \r\n            book.getIsSellable() && book.getStockForSale() > 0);\r\n    }\r\n\r\n    @Test\r\n    void testPriceRangeFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setMinPrice(new BigDecimal(\"30.00\"));\r\n        criteria.setMaxPrice(new BigDecimal(\"40.00\"));\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1); // Only book2\r\n        assertThat(results.get(0).getPrice()).isBetween(\r\n            new BigDecimal(\"30.00\"), new BigDecimal(\"40.00\"));\r\n    }\r\n\r\n    @Test\r\n    void testPageRangeFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setMinPages(450);\r\n        criteria.setMaxPages(550);\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1); // Only book1\r\n        assertThat(results.get(0).getNumberOfPages()).isBetween(450, 550);\r\n    }\r\n\r\n    @Test\r\n    void testRecentlyAddedFilter() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setRecentlyAdded(true);\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(2); // book1 and book2 (book3 is older than 30 days)\r\n    }\r\n\r\n    @Test\r\n    void testCombinedFilters() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setKeyword(\"Programming\");\r\n        criteria.setCategoryIds(Arrays.asList(category1.getId()));\r\n        criteria.setLanguage(\"en\");\r\n        criteria.setIsSellable(true);\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(1);\r\n        assertThat(results.get(0).getTitle()).contains(\"Java\");\r\n    }\r\n\r\n    @Test\r\n    void testWithPagination() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setLanguage(\"en\");\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        Pageable pageable = PageRequest.of(0, 1);\r\n        Page<Book> results = bookRepository.findAll(spec, pageable);\r\n\r\n        assertThat(results.getContent()).hasSize(1);\r\n        assertThat(results.getTotalElements()).isEqualTo(2);\r\n        assertThat(results.getTotalPages()).isEqualTo(2);\r\n    }\r\n\r\n    @Test\r\n    void testIndividualSpecifications() {\r\n        // Test hasKeyword specification\r\n        Specification<Book> keywordSpec = BookSpecification.hasKeyword(\"Java\");\r\n        List<Book> keywordResults = bookRepository.findAll(keywordSpec);\r\n        assertThat(keywordResults).hasSize(1);\r\n\r\n        // Test belongsToCategory specification\r\n        Specification<Book> categorySpec = BookSpecification.belongsToCategory(category1.getId());\r\n        List<Book> categoryResults = bookRepository.findAll(categorySpec);\r\n        assertThat(categoryResults).hasSize(2);\r\n\r\n        // Test availableForLoan specification\r\n        Specification<Book> loanSpec = BookSpecification.availableForLoan();\r\n        List<Book> loanResults = bookRepository.findAll(loanSpec);\r\n        assertThat(loanResults).hasSize(2);\r\n\r\n        // Test priceRange specification\r\n        Specification<Book> priceSpec = BookSpecification.priceRange(\r\n            new BigDecimal(\"25.00\"), new BigDecimal(\"30.00\"));\r\n        List<Book> priceResults = bookRepository.findAll(priceSpec);\r\n        assertThat(priceResults).hasSize(2);\r\n    }\r\n\r\n    @Test\r\n    void testEmptyCriteria() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).hasSize(3); // Should return all books\r\n    }\r\n\r\n    @Test\r\n    void testNoResultsFound() {\r\n        BookSearchCriteria criteria = new BookSearchCriteria();\r\n        criteria.setKeyword(\"NonexistentBook\");\r\n\r\n        Specification<Book> spec = BookSpecification.withCriteria(criteria);\r\n        List<Book> results = bookRepository.findAll(spec);\r\n\r\n        assertThat(results).isEmpty();\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/library-backend/src/test/java/com/library/specification/BookSpecificationTest.java b/library-backend/src/test/java/com/library/specification/BookSpecificationTest.java
--- a/library-backend/src/test/java/com/library/specification/BookSpecificationTest.java	(revision 8c18df93ba07a48caf90e1e140f9cdeced980cf4)
+++ b/library-backend/src/test/java/com/library/specification/BookSpecificationTest.java	(date 1749308695365)
@@ -1,382 +1,0 @@
-package com.library.specification;
-
-import com.library.dto.BookSearchCriteria;
-import com.library.entity.*;
-import com.library.repository.BookRepository;
-import jakarta.persistence.EntityManager;
-import org.junit.jupiter.api.BeforeEach;
-import org.junit.jupiter.api.Test;
-import org.springframework.beans.factory.annotation.Autowired;
-import org.springframework.boot.test.autoconfigure.orm.jpa.DataJpaTest;
-import org.springframework.data.domain.Page;
-import org.springframework.data.domain.PageRequest;
-import org.springframework.data.domain.Pageable;
-import org.springframework.data.jpa.domain.Specification;
-import org.springframework.test.context.ActiveProfiles;
-
-import java.math.BigDecimal;
-import java.time.LocalDateTime;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.assertj.core.api.Assertions.assertThat;
-
-@DataJpaTest
-@ActiveProfiles("test")
-class BookSpecificationTest {
-
-    @Autowired
-    private BookRepository bookRepository;
-
-    @Autowired
-    private EntityManager entityManager;
-
-    private Book book1, book2, book3;
-    private Category category1, category2;
-    private Publisher publisher1, publisher2;
-    private Author author1, author2;
-
-    @BeforeEach
-    void setUp() {
-        // Create test categories
-        category1 = new Category();
-        category1.setName("Science Fiction");
-        category1.setDescription("Science fiction books");
-        entityManager.persist(category1);
-
-        category2 = new Category();
-        category2.setName("Fantasy");
-        category2.setDescription("Fantasy books");
-        entityManager.persist(category2);
-
-        // Create test publishers
-        publisher1 = new Publisher();
-        publisher1.setName("Tech Books Publisher");
-        publisher1.setAddress("123 Tech Street");
-        entityManager.persist(publisher1);
-
-        publisher2 = new Publisher();
-        publisher2.setName("Fiction House");
-        publisher2.setAddress("456 Story Lane");
-        entityManager.persist(publisher2);
-
-        // Create test authors
-        author1 = new Author();
-        author1.setName("John Doe");
-        author1.setBiography("Famous sci-fi author");
-        entityManager.persist(author1);
-
-        author2 = new Author();
-        author2.setName("Jane Smith");
-        author2.setBiography("Popular fantasy writer");
-        entityManager.persist(author2);
-
-        // Create test books
-        book1 = new Book();
-        book1.setTitle("Java Programming Guide");
-        book1.setIsbn("978-0123456789");
-        book1.setDescription("Comprehensive guide to Java programming");
-        book1.setLanguage("en");
-        book1.setPublicationYear(2020);
-        book1.setNumberOfPages(500);
-        book1.setPrice(new BigDecimal("29.99"));
-        book1.setStockForSale(10);
-        book1.setIsSellable(true);
-        book1.setIsLendable(true);
-        book1.setTotalCopiesForLoan(5);
-        book1.setAvailableCopiesForLoan(3);
-        book1.setCategory(category1);
-        book1.setPublisher(publisher1);
-        book1.setCreatedAt(LocalDateTime.now().minusDays(10));
-        entityManager.persist(book1);
-
-        book2 = new Book();
-        book2.setTitle("Spring Boot in Action");
-        book2.setIsbn("978-9876543210");
-        book2.setDescription("Learn Spring Boot framework");
-        book2.setLanguage("en");
-        book2.setPublicationYear(2021);
-        book2.setNumberOfPages(400);
-        book2.setPrice(new BigDecimal("35.50"));
-        book2.setStockForSale(0); // Out of stock
-        book2.setIsSellable(true);
-        book2.setIsLendable(false); // Not lendable
-        book2.setTotalCopiesForLoan(0);
-        book2.setAvailableCopiesForLoan(0);
-        book2.setCategory(category1);
-        book2.setPublisher(publisher1);
-        book2.setCreatedAt(LocalDateTime.now().minusDays(5));
-        entityManager.persist(book2);
-
-        book3 = new Book();
-        book3.setTitle("The Magic Realm");
-        book3.setIsbn("978-1111111111");
-        book3.setDescription("An epic fantasy adventure");
-        book3.setLanguage("vi");
-        book3.setPublicationYear(2019);
-        book3.setNumberOfPages(600);
-        book3.setPrice(new BigDecimal("25.00"));
-        book3.setStockForSale(15);
-        book3.setIsSellable(true);
-        book3.setIsLendable(true);
-        book3.setTotalCopiesForLoan(8);
-        book3.setAvailableCopiesForLoan(6);
-        book3.setCategory(category2);
-        book3.setPublisher(publisher2);
-        book3.setCreatedAt(LocalDateTime.now().minusDays(45)); // Older book
-        entityManager.persist(book3);
-
-        // Create book-author relationships
-        BookAuthor bookAuthor1 = new BookAuthor();
-        bookAuthor1.setBook(book1);
-        bookAuthor1.setAuthor(author1);
-        bookAuthor1.setAuthorRole("AUTHOR");
-        entityManager.persist(bookAuthor1);
-
-        BookAuthor bookAuthor2 = new BookAuthor();
-        bookAuthor2.setBook(book3);
-        bookAuthor2.setAuthor(author2);
-        bookAuthor2.setAuthorRole("AUTHOR");
-        entityManager.persist(bookAuthor2);
-
-        entityManager.flush();
-        entityManager.clear();
-    }
-
-    @Test
-    void testKeywordSearch() {
-        // Test keyword search in title
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setKeyword("Java");
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1);
-        assertThat(results.get(0).getTitle()).contains("Java");
-    }
-
-    @Test
-    void testKeywordSearchInDescription() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setKeyword("Spring Boot");
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1);
-        assertThat(results.get(0).getDescription()).contains("Spring Boot");
-    }
-
-    @Test
-    void testCategoryFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setCategoryIds(Arrays.asList(category1.getId()));
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(2);
-        assertThat(results).allMatch(book -> book.getCategory().getId().equals(category1.getId()));
-    }
-
-    @Test
-    void testPublisherFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setPublisherIds(Arrays.asList(publisher2.getId()));
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1);
-        assertThat(results.get(0).getPublisher().getId()).isEqualTo(publisher2.getId());
-    }
-
-    @Test
-    void testAuthorFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setAuthorIds(Arrays.asList(author1.getId()));
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1);
-        assertThat(results.get(0).getTitle()).isEqualTo("Java Programming Guide");
-    }
-
-    @Test
-    void testLanguageFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setLanguage("vi");
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1);
-        assertThat(results.get(0).getLanguage()).isEqualTo("vi");
-    }
-
-    @Test
-    void testPublicationYearFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setPublicationYear(2020);
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1);
-        assertThat(results.get(0).getPublicationYear()).isEqualTo(2020);
-    }
-
-    @Test
-    void testPublicationYearRange() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setPublicationYearFrom(2020);
-        criteria.setPublicationYearTo(2021);
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(2);
-        assertThat(results).allMatch(book -> 
-            book.getPublicationYear() >= 2020 && book.getPublicationYear() <= 2021);
-    }
-
-    @Test
-    void testAvailableForLoanFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setAvailableForLoan(true);
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(2); // book1 and book3
-        assertThat(results).allMatch(book -> 
-            book.getIsLendable() && book.getAvailableCopiesForLoan() > 0);
-    }
-
-    @Test
-    void testAvailableForSaleFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setAvailableForSale(true);
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(2); // book1 and book3 (book2 out of stock)
-        assertThat(results).allMatch(book -> 
-            book.getIsSellable() && book.getStockForSale() > 0);
-    }
-
-    @Test
-    void testPriceRangeFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setMinPrice(new BigDecimal("30.00"));
-        criteria.setMaxPrice(new BigDecimal("40.00"));
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1); // Only book2
-        assertThat(results.get(0).getPrice()).isBetween(
-            new BigDecimal("30.00"), new BigDecimal("40.00"));
-    }
-
-    @Test
-    void testPageRangeFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setMinPages(450);
-        criteria.setMaxPages(550);
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1); // Only book1
-        assertThat(results.get(0).getNumberOfPages()).isBetween(450, 550);
-    }
-
-    @Test
-    void testRecentlyAddedFilter() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setRecentlyAdded(true);
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(2); // book1 and book2 (book3 is older than 30 days)
-    }
-
-    @Test
-    void testCombinedFilters() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setKeyword("Programming");
-        criteria.setCategoryIds(Arrays.asList(category1.getId()));
-        criteria.setLanguage("en");
-        criteria.setIsSellable(true);
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(1);
-        assertThat(results.get(0).getTitle()).contains("Java");
-    }
-
-    @Test
-    void testWithPagination() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setLanguage("en");
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        Pageable pageable = PageRequest.of(0, 1);
-        Page<Book> results = bookRepository.findAll(spec, pageable);
-
-        assertThat(results.getContent()).hasSize(1);
-        assertThat(results.getTotalElements()).isEqualTo(2);
-        assertThat(results.getTotalPages()).isEqualTo(2);
-    }
-
-    @Test
-    void testIndividualSpecifications() {
-        // Test hasKeyword specification
-        Specification<Book> keywordSpec = BookSpecification.hasKeyword("Java");
-        List<Book> keywordResults = bookRepository.findAll(keywordSpec);
-        assertThat(keywordResults).hasSize(1);
-
-        // Test belongsToCategory specification
-        Specification<Book> categorySpec = BookSpecification.belongsToCategory(category1.getId());
-        List<Book> categoryResults = bookRepository.findAll(categorySpec);
-        assertThat(categoryResults).hasSize(2);
-
-        // Test availableForLoan specification
-        Specification<Book> loanSpec = BookSpecification.availableForLoan();
-        List<Book> loanResults = bookRepository.findAll(loanSpec);
-        assertThat(loanResults).hasSize(2);
-
-        // Test priceRange specification
-        Specification<Book> priceSpec = BookSpecification.priceRange(
-            new BigDecimal("25.00"), new BigDecimal("30.00"));
-        List<Book> priceResults = bookRepository.findAll(priceSpec);
-        assertThat(priceResults).hasSize(2);
-    }
-
-    @Test
-    void testEmptyCriteria() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).hasSize(3); // Should return all books
-    }
-
-    @Test
-    void testNoResultsFound() {
-        BookSearchCriteria criteria = new BookSearchCriteria();
-        criteria.setKeyword("NonexistentBook");
-
-        Specification<Book> spec = BookSpecification.withCriteria(criteria);
-        List<Book> results = bookRepository.findAll(spec);
-
-        assertThat(results).isEmpty();
-    }
-}
\ No newline at end of file
